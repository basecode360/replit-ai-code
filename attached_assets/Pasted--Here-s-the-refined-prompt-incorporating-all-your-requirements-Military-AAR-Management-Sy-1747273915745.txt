


Here's the refined prompt incorporating all your requirements:

---

**Military AAR Management System Prompt for Replit**

"Build a secure military After-Action Review (AAR) management system with these specifications:

---

### **1. User Management**
- **Role-Based Profiles**: Users register with specific military roles (Soldier, Team Leader, Squad Leader, Platoon Sergeant, Platoon Leader, Section Sergeant, First Sergeant, XO, Commander) and rank.  
- **Hierarchy Inheritance**: Subordinate units automatically inherit role-based permissions from parent units (e.g., a Platoon Leader’s permissions cascade to their squad leaders).  
- **Profile Data**: Store name, rank, unit ID, role, and bio. No profile pictures for simplicity.  

---

### **2. Unit Registration**
- **Hierarchical Structure**: Units create accounts and generate referral links to register subordinate elements (e.g., a battalion creates company-level subunits).  
- **Common Unit ID**: All subunits share the parent unit’s ID for data aggregation.  
- **Referral Links**: Non-expiring, text-based links with no usage limits.  

---

### **3. Event Creation**
- **8-Step Training Model**: Events map to the Army’s 8-step process (risk assessment, planning, preparation, rehearsal, execution, AAR, retraining, certification).  
- **Autogenerated Titles**: Use the user’s custom event title + step number (e.g., *Urban Ops Training - Step 5: Execution*).  
- **Metadata**: Capture date (local time, date-only), location, objectives, resources, and participant list.  
- **Timeline Mapping**: Allow users to visualize event phases chronologically.  

---

### **4. AAR Workflow**
- **Linking**: AARs automatically inherit event metadata (unit ID, participants, date, event title).  
- **Participation Access**: Users tagged to an event can view all AARs and comments from participants.  
- **Soft Deletion**: Allow recovery of deleted AARs/events for compliance.  
- **QR Codes**: Generate simple text-based QR codes for AAR submission links (no dynamic updates).  

---

### **5. Venice AI Integration**
- **API Connection**: Direct integration with Venice AI’s API for analysis.  
- **Analysis Features**:  
  - Identify trends in comments (e.g., recurring equipment failures, communication breakdowns).  
  - Highlight friction points (e.g., training gaps, procedural inefficiencies).  
  - Provide actionable improvement steps for units (e.g., *Increase night-vision training by 20% based on repeated visibility issues*).  
- **Dataset Scope**: Analyze all AARs across units for cross-unit insights.  

---

### **6. Security & Compliance**
- **Audit Logs**: Track all user actions (AAR edits, event modifications, logins) with timestamps and IP addresses.  
- **Data Storage**: Operate on civilian/NIPR networks; use PostgreSQL with field-level encryption for sensitive data.  
- **Soft Deletion**: Implement soft deletes for AARs/events with a 30-day recovery window.  

---

### **7. Technical Requirements**
- **Stack**: Python/Flask (backend), React (frontend), PostgreSQL (database).  
- **API Security**: Use JWT for authentication; store API keys and credentials in environment variables.  
- **Deployment**: Include Replit deployment instructions and a Dockerfile.  
- **Database Schema**: Explicitly define foreign key relationships between users, units, events, and AARs to prevent title association errors.  

---

### **8. Exclusions**
- No real-time notifications or calendar synchronization.  
- No data anonymization or export formats beyond CSV/PDF.  

